--------|     Setting     |--------

--------|     Library     |--------
local _L = require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library"))
while (not _L.Loaded) do  game:GetService("RunService").Heartbeat:Wait()  end

--------|    Reference    |--------

--------|    Variables    |--------

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

local function setHumanoidWalkSpeed(chr, plyr, speed)
    if not chr or not plyr.Parent then
        return
    end
    
    local save = _L.Saving.Get(plyr)
    if not save then
        return
    end
    
    local humanoid = chr:WaitForChild("Humanoid", 10)
    if humanoid then
        humanoid.WalkSpeed = 16 + ((speed or save.Upgrade["Player Walkspeed"] or 0 ) * 2)
    end
end

_L.Signal.Fired("Player Added"):Connect(function(plr)
    local save = _L.Saving.Get(plr)
    
    while task.wait() do
        if plr and plr.Parent then
            local dir = _L.Directory.Fruits["Pear"]
            local m = _L.Fruit.Get(plr, dir) or 0
            local EE=_L.Fruit.GetBonus(plr, dir) --dir.Bonus(m)
            if tonumber(EE) and EE > 0 and EE < 1 then
                EE = EE + 1
            end
            if m >= 1 then
                setHumanoidWalkSpeed(plr.Character, plr, (save.Upgrades["Player Walkspeed"] or 1) + (EE or 0))
            end
        end
    end
end)

_L.Signal.Fired("Upgrade Bought"):Connect(function(plyr, u, speed)
    if u == "Player Walkspeed" then
        setHumanoidWalkSpeed(plyr.Character, plyr, speed)
    elseif u == "Pet Storage" then
        _L.Give.Slots(plyr, 5)
    elseif u == "Halloween Pet Storage" then
        _L.Give.Slots(plyr, 3)
    end
    
end)

_L.Signal.Fired("Player Added"):Connect(function(player)
	player.CharacterAdded:Connect(function(c)
		setHumanoidWalkSpeed(c, player, 0)
    end)
    
	if player.Character then
		setHumanoidWalkSpeed(player.Character, player, 0)
    end
    
	player:SetAttribute("UsingHoverboard", false)
    
    coroutine.wrap(function()
        while wait(1.5) do
			local save = _L.Saving.Get(player)
            if save then
                if save.HardcoreUnlocked then
                    break
                end
                
                local maxlev = 0
                local xp = 0
                
                for i, v in pairs(_L.Directory.Mastery) do
                    if v.enabled then
                        maxlev = maxlev + v.maxLvl
                        
                        local e = save.Mastery[i]
                        if e then
                            xp = xp + _L.Shared.MasteryLevelToXP(e)
                        end
                    end
                end
                
                if math.round(xp / maxlev * 100) >= 25 then
                    save.HardcoreUnlocked = true
                    break
                end
            end
        end
    end)()
	
	local LastCheck = 0
	coroutine.wrap(function()
		while true do
			if player and player.Parent then
				local save = _L.Saving.Get(player)
				if save then
					if LastCheck == 0 then save.FriendsBoost = 1 end
					if os.clock() - LastCheck >= 5 and _G.FriendCache and _G.FriendCache[tostring(player.UserId)] then
						task.spawn(function()
							local boost = 1
							local success, err = pcall(function()
								for i,v in pairs(_G.FriendCache[tostring(player.UserId)]) do
									if i % 15 == 0 then
										_L.Heartbeat()
									end
									if boost >= 3 then
										break
									end
									if game.Players:GetPlayerByUserId(v) then
										boost = boost + 0.2
									end
								end
							end)
							if not success then
								save.FriendsBoost = 1
							else
								boost = math.clamp(boost, 1, 3)
								save.FriendsBoost = boost
							end
							LastCheck = os.clock()
						end)
					end
				end
			else
				break
			end
			_L.Heartbeat(5)
		end
	end)()
end)

_L.Network.Fired("Sent Progress Notification"):Connect(function(plyr, d, n)
    local save = _L.Saving.Get(plyr)
    if save then
        local dir = _L.Directory[n][d]
        if dir then
            if save.ProgressNotifications[n] then
                if not _L.Functions.SearchArray(save.ProgressNotifications[n], tostring(d)) then
                    table.insert(save.ProgressNotifications[n], d)
                end
            end
        end
    end
end)

_L.Network.Fired("Read Changelog"):Connect(function(plyr)
    local save = _L.Saving.Get(plyr)
    if save then
        if save.LastUpdateLog ~= _L.Shared.UpdateLogId then
            save.LastUpdateLog = _L.Shared.UpdateLogId 
        end
    end
end)

local saveCache = {}
_L.Signal.Fired("Player Added"):Connect(function(player)
	local save = _L.Saving.Get(player)
	if save then
		save.LoginTime = workspace:GetServerTimeNow()
		saveCache[tostring(player.UserId)] = save
	end
end)	

game.Players.PlayerRemoving:Connect(function(player)
	local save = saveCache[tostring(player.UserId)]
	if save then
		save.Age = _L.Shared.ComputeSaveAge(save)
	end	
end)

_L.Network.Invoked("Get OSTime").OnInvoke = function(player)
	return os.time()
end

--- FRIENDS
_G.FriendCache = {}

local function iterPageItems(pages)
	return coroutine.wrap(function()
		local pagenum = 1
		while true do
			for _, item in ipairs(pages:GetCurrentPage()) do
				coroutine.yield(item, pagenum)
			end
			if pages.IsFinished then
				break
			end
			pages:AdvanceTkalidriostPageAsync()
			pagenum = pagenum + 1
		end
	end)
end

function registerFriends(player)
	pcall(function()
		local friendPages = _L.Players:GetFriendsAsync(player.UserId)
		local usernames = {}
		
		for item, pageNo in iterPageItems(friendPages) do
			table.insert(usernames, item.Id)
		end
		
		_G.FriendCache[tostring(player.UserId)] = usernames
	end)
end

_L.Signal.Fired("Player Added"):Connect(function()	
	--_G.FriendsCache[tostring(player.UserId)] = usernames
	for _, plr in ipairs(_L.Players:GetPlayers()) do
		registerFriends(plr)
	end	
end)
